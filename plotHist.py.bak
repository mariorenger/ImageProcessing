import matplotlib.pyplot as plt
import numpy as np
import cv2
def plot(image, new, cls):
    """
    chans = cv2.split(image)
    colors = ("b", "g", "r")
    plt.figure()
    plt.title("Color Histogram")
    plt.xlabel("Bins")
    plt.ylabel("# of Pixels")
    # loop over the image channels
    for (chan, color) in zip(chans, colors):
        # create a histogram for the current channel and plot it
        hist = cv2.calcHist([chan], [0], None, [256], [0, 256])
        plt.plot(hist, color=color)
        plt.xlim([0, 256])
    plt.show()
    """
    
    colors = ("b", "g", "r")
    fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(7, 7),
                                    sharex=False, sharey=False)

        
    chans1 = cv2.split(image)
    for (chan, color) in zip(chans1, colors):
        # create a histogram for the current channel and plot it
        hist = cv2.calcHist([chan], [0], None, [256], [0, 256])
        ax[1][0].plot(hist, color=color)
        ax[1][1].set_ylim(0, 2255)
    ax[1][0].set_title('old')
    
    chans2 = cv2.split(new)
    for (chan, color) in zip(chans2, colors):
        # create a histogram for the current channel and plot it
        hist = cv2.calcHist([chan], [0], None, [256], [0, 256])
        ax[1][1].plot(hist, color=color)
        ax[1][1].set_ylim(0, 2255)
        
    
    ax[1][1].set_title('new')
    if cls == "HSV":
        ax[0][0].imshow(image[:,:,0], cmap = 'hsv')
    else:
        ax[0][0].imshow(image)
    ax[0][1].imshow(new)
    #plt.tight_layout()
    plt.show()
    
def plot_matching(image, reference, matched):
    fig, axes = plt.subplots(nrows=4, ncols=3, figsize=(8, 8), sharex=False, sharey=False)
    for i, img in enumerate((image, reference, matched)):
        for c, c_color in enumerate(("b", "g", "r")):
            hist = cv2.calcHist([img[..., c]], [0], None, [256], [0, 256])
            axes[c, i].plot(hist, color=c_color)
            axes[c, 0].set_ylabel(c_color)

    axes[0, 0].set_title('Source')
    axes[0, 1].set_title('Reference')
    axes[0, 2].set_title('Matched')
    
    axes[3, 0].imshow(image)
    axes[3, 1].imshow(reference)
    axes[3, 2].imshow(matched)

    #plt.tight_layout()
    plt.show()

def cdf(img):
    cdf_img = dict()
    for i in range(256):
        cdf_img[i] = len(img[img==i])

    for i in range(1,256):
        cdf_img[i] += cdf_img[i-1]
    return cdf_img


def equal(img):
    colorf = np.zeros(img.shape)
    colorf[:,:,0] = histeq(img[:,:,0])
    colorf[:,:,1] = histeq(img[:,:,1])
    colorf[:,:,2] = histeq(img[:,:,2])
    colorf = colorf.astype(int)

    cv2.imwrite('new_img_color.png',colorf)
    return colorf

def match(image, target):
    colorf = np.zeros(image.shape)
    colorf[:,:,0] = histogram_matching(image[:,:,0], target[:,:,0])
    colorf[:,:,1] = histogram_matching(image[:,:,1], target[:,:,1])
    colorf[:,:,2] = histogram_matching(image[:,:,2], target[:,:,2])
    colorf = colorf.astype(int)

    cv2.imwrite('new_img_color_2.png',colorf)
    return colorf

def histeq(img, L=256):
    m,n = img.shape
    
    # histogram
    hist = np.zeros(L)
    for i in range(m):
        for j in range(n):
            hist[img[i,j]] += 1
    
    # probability / normalize
    prob = hist/(m*n)

    # cdf
    cdf = np.zeros(L)
    cdf[0] = prob[0]
    for i in range(1, L):
        cdf[i] = cdf[i-1] + prob[i]

    # transform
    transform = (L-1)*cdf

    # generate the output
    out = np.zeros(img.shape)
    for i in range(L):
        out[np.where(img==i)] = transform[i]
    
    return out.astype("uint8")
    
def histogram_matching(img, target, L=256):
    """
    Input
        - img : input grayscale image (np.array) to be manipulated.
        - target : target grayscale image (np.array) for histogram reference.
        - L (default=256) : integer specifying the number of quantization levels.
    
    Returns the histogram matched (to target) version of img.
    """
    m,n = img.shape
    
    # histogram
    h = np.zeros(L)
    g = np.zeros(L)
    for i in range(m):
        for j in range(n):
            h[img[i,j]] += 1
            g[target[i,j]] += 1
    
    # probability / normalize
    h = h/(m*n)
    g = g/(m*n)
    
    # cdf
    H = np.zeros(L)
    G = np.zeros(L)
    H[0] = h[0]
    G[0] = g[0]
    for i in range(1, L):
        H[i] = H[i-1] + h[i]
        G[i] = G[i-1] + g[i]
    
    # transform
    transform = []
    for i in range(L):
        map_to = i
        min_diff = float("inf")
        for j in range(L):
            new_diff = abs(H[i] - G[j])
            if new_diff < min_diff:
                min_diff = new_diff
                map_to = j
        transform.append(map_to)
    # generate the output
    out = np.zeros(img.shape)
    for i in range(L):
        out[np.where(img==i)] = transform[i]
    
    return out.astype("uint8")